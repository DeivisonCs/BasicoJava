CREATE TABLE cidade ( cod_cidade int NOT NULL UNIQUE,
					 descricao VARCHAR(30) NOT NULL,
					 CONSTRAINT pk_cidade PRIMARY KEY (cod_cidade));
					 
					 
CREATE TABLE apostador ( cod_apostador int NOT NULL UNIQUE,
					 nome_apostador VARCHAR(30),
					 cod_cidade int NOT NULL,
					 CONSTRAINT pk_apostador PRIMARY KEY (cod_apostador),
					 CONSTRAINT fk_cidade_apostador FOREIGN KEY (cod_cidade) REFERENCES cidade (cod_cidade));
					 

CREATE TABLE numero ( cod_numero int NOT NULL UNIQUE,
					 CONSTRAINT pk_numero PRIMARY KEY (cod_numero));
					
					 
CREATE TABLE sorteio ( cod_sorteio int NOT NULL UNIQUE,
					  data_sorteio DATE NOT NULL,
					  numero_sorteado int NOT NULL,
					 CONSTRAINT pk_sorteio PRIMARY KEY (cod_sorteio),
					 CONSTRAINT fk_sorteio_numero FOREIGN KEY (numero_sorteado) REFERENCES numero (cod_numero));
			 

CREATE TABLE aposta ( cod_aposta int NOT NULL UNIQUE,
					 cod_apostador int NOT NULL,
					 numero_apostado int NOT NULL,
					 cod_sorteio int NOT NULL,
					 CONSTRAINT pk_aposta PRIMARY KEY (cod_aposta),
					 CONSTRAINT fk_aposta_apostador FOREIGN KEY (cod_apostador) REFERENCES apostador (cod_apostador),
					CONSTRAINT fk_aposta_numero FOREIGN KEY (numero_apostado) REFERENCES numero (cod_numero),
					 CONSTRAINT fk_aposta_sorteio FOREIGN KEY (cod_sorteio) REFERENCES sorteio (cod_sorteio)
					 );


INSERT INTO cidade (cod_cidade, descricao) 
VALUES 
	(1, 'SALVADOR'),
	(2, 'ALAGOINHAS'),
	(3, 'FEIRA DE SANTANA'),
	(4, 'VAENCA'),
	(5, 'ITABUNA');
	
INSERT INTO apostador (cod_apostador, nome_apostador, cod_cidade)
VALUES
	(1, 'GRINALDO', 1),
	(2, 'PEDRO', 1),
	(3, 'BEATRIZ', 2),
	(4, 'CRISTIANE', 3),
	(5, 'AMELIA', 5);
	
INSERT INTO numero (cod_numero)
VALUES
	(1),(2),(3),(4),(5);
	
INSERT INTO sorteio (cod_sorteio, data_sorteio, numero_sorteado)
VALUES
	(1, '01-01-2023', 1),
	(2, '24-01-2023', 3),
	(3, '15-02-2023', 5),
	(4, '26-02-2023', 5),
	(5, '10-03-2023', 3);


INSERT INTO aposta (cod_aposta, cod_apostador, numero_apostado, cod_sorteio)
VALUES
	(1,1,1,1),
	(2,2,4,2),
	(3,3,5,3),
	(4,4,2,4),
	(5,5,3,5),
	(6,1,3,1),
	(7,2,2,2),
	(8,2,2,3),
	(9,3,2,4),
	(10,4,2,5);

-- a) Selecione os APOSTADORES e suas respectivas CIDADES por ORDEM DESCRESCENTE de NOME_APOSTADOR.

SELECT ap.*, city.descricao
FROM apostador AS ap
	INNER JOIN cidade AS city
		ON(ap.cod_cidade = city.cod_cidade)
ORDER BY ap.nome_apostador DESC;


-- b) Selecione os NOMES dos APOSTADORES e a quantidade de APOSTAS de cada um deles, por ORDEM CRESCENTE da QUANTIDADE DE APOSTAS.

SELECT ap.nome_apostador, COUNT(bet.cod_apostador)
FROM apostador AS ap
	LEFT JOIN aposta AS bet
		ON(ap.cod_apostador =  bet.cod_apostador)
GROUP BY ap.cod_apostador
ORDER BY COUNT(bet.cod_apostador);

-- c) Selecione os NUMEROS SORTEADOS que saíram mais de uma vez em SORTEIO.

SELECT num.cod_numero, COUNT(num.cod_numero)
FROM numero AS num
	RIGHT JOIN aposta AS bet
		ON(num.cod_numero = bet.numero_apostado)
GROUP BY num.cod_numero
HAVING COUNT(num.cod_numero) > 1;

-- d) Selecione as CIDADES que tenham a letra S em sua DESCRICAO e que tiveram APOSTADORES GANHADORES dos SORTEIOS.

SELECT city.descricao
FROM cidade AS city
	INNER JOIN apostador AS ap
		ON(city.cod_cidade = ap.cod_cidade AND city.descricao LIKE '%S%')
	LEFT JOIN aposta AS bet
		ON(ap.cod_apostador = bet.cod_apostador) 
	RIGHT JOIN sorteio AS so
		ON(bet.numero_apostado = so.numero_sorteado)
GROUP BY city.descricao;

-- e) Selecione os NUMEROS que NUNCA PARTICIPARAM de algum
-- SORTEIO.
-- f) Selecione a QUANTIDADE de APOSTAS por CIDADE, por ORDEM
-- CRESCENTE de APOSTAS, colocando ZERO nas CIDADES que não
-- possuem APOSTA.

-- g) Atualize para ‘CIDADE_RETADA’ a DESCRICAO da CIDADE que
-- possuir mais de 4 APOSTAS REALIZADAS.


UPDATE cidade city SET descricao='CIDADE _RETADA' 
WHERE city.cod_cidade in
	(SELECT city.cod_cidade
	FROM cidade AS city
		INNER JOIN apostador AS ap
			ON(city.cod_cidade = ap.cod_cidade)
		LEFT JOIN aposta AS bet
			ON(ap.cod_apostador = bet.cod_apostador)
	GROUP BY city.descricao,  city.cod_cidade
	HAVING COUNT(bet.cod_aposta) > 4);



-- h) Apague os APOSTADORES cujos NUMEROS APOSTADOS tenham uma
-- SOMA com resultado MAIOR QUE 5. Observação: o comando dará erro de
-- violação de chave estrangeira

